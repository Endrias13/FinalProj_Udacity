# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool: myFinalPool

variables:
  system.debug: true
  python.version: '3.9'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'myServiceConnection'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'test'
  #Resource Group Name
  rgname: 'endrias2024_rg_354888' 
  #Storage Name
  storename: 'mystoragefinalproj' 
  #App Name
  appname: 'endriasApplication-AppService'
  backend_key: 'test.terraform.tfstate'
  storage_account_key: 'SIX4qMsGiDSN40qEZ+YFZm8MZB0EDmLLz3YGlQkgrG/u92UAJCLhgdqrvVK6qqAWrM6OASsFCeXZ+ASt4df8mw=='

stages:

- stage: Provisioning
  displayName: Provisioning
  jobs: 
  - job: ProvisioningAppService
    displayName: Provisioning AppService
      
    steps:    
    # Ensure unzip is installed
    - script: |
        sudo apt-get update
        sudo apt-get install -y unzip
      displayName: 'Install unzip utility'


   # Install Terraform on the pipeline agent 
    - task: TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
            terraformVersion: 1.2.9
            
    # ToDo: Replace the resource group name, storage account name, and container name below
    - task: TerraformTaskV3@3
      displayName: 'Terrafom init again..'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: '$(rgname)'
        backendAzureRmStorageAccountName: '$(storename)'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: '$(backend_key)'
        backendAzureRmAccessKey: '$(storage_account_key)'

    # Run Terraform Validate    
    - task: TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'


    # Run Terraform Apply
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
        commandOptions: '-auto-approve -no-color -lock=false'
        continueOnError: true  # Continue on error to execute the next step

    - script: |
        az storage blob lease release --blob-name $(backend_key) --container-name tfstate --account-name $(storename) --account-key $(storage_account_key) --lease-id $(LEASE_ID)
        echo "Released lease ID: $(LEASE_ID)"
      displayName: 'Release lease on state file'
      condition: always()  # Always run this step to ensure the lease is released


- stage: Build
  displayName: Build
  jobs:
  - job: Build
    pool: myFinalPool
    steps:
    #Needed for Terraform VM deployment
    # - task: InstallSSHKey@0
    #   inputs:
    #     knownHostsEntry: 'KNOWN_HOSTS_STRING'
    #     sshPublicKey: 'PUBLIC_KEY'
    #     sshKeySecureFile: 'id_rsa'

    - script: |
        sudo apt-get update
        sudo apt-get install -y zip
      displayName: 'Install zip utility'
      
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
   
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi
    
    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/selenium-tests.zip
        replaceExistingArchive: true
        
    - upload: $(Build.ArtifactStagingDirectory)/selenium-tests.zip
      artifact: selenium



- stage: JMeterTests
  displayName: JMeter Tests
  jobs:
  - job: JMeterTests
    displayName: JMeter Tests
    pool: myFinalPool
    steps: 

    - task: JMeterInstaller@0
      inputs:
        jmeterVersion: '5.2.1'

    - task: Bash@3
      displayName: EnduranceTest
      inputs:
        targetType: 'inline'
        script: 'jmeter -n -t automatedtesting/jmeter/EnduranceTestSuite.jmx -Jresdir=automatedtesting/jmeter/endurancepages.csv -l automatedtesting/jmeter/report/enduranceresults.jtl -e -o automatedtesting/jmeter/endurancereport'
    
    - task: Bash@3
      displayName: StressTest
      inputs:
        targetType: 'inline'
        script: |
          jmeter -n -t automatedtesting/jmeter/StressTestSuite.jmx -Jresdir=automatedtesting/jmeter/stresspages.csv -l automatedtesting/jmeter/report/stressresults.jtl -e -o automatedtesting/jmeter/stressreport

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: 'automatedtesting/jmeter'
        ArtifactName: 'jmeter'
        publishLocation: 'Container'
