# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool: myFinalPool

variables:
  system.debug: true
  python.version: '3.9'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'myServiceConnection'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'test'
  #Resource Group Name
  rgname: 'endrias2024_rg_354888' 
  #Storage Name
  storename: 'mystoragefinalproj' 
  #App Name
  appname: 'endriasApplication-AppService'
  backend_key: 'test.terraform.tfstate'
  storage_account_key: 'SIX4qMsGiDSN40qEZ+YFZm8MZB0EDmLLz3YGlQkgrG/u92UAJCLhgdqrvVK6qqAWrM6OASsFCeXZ+ASt4df8mw=='

stages:

- stage: Provisioning
  displayName: Provisioning
  jobs: 
  - job: ProvisioningAppService
    displayName: Provisioning AppService
      
    steps:    
    # Ensure unzip is installed
    - script: |
        sudo apt-get update
        sudo apt-get install -y unzip
      displayName: 'Install unzip utility'


   # Install Terraform on the pipeline agent 
    - task: TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
            terraformVersion: 1.2.9
            
    # ToDo: Replace the resource group name, storage account name, and container name below
    - task: TerraformTaskV3@3
      displayName: 'Terrafom init again..'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: '$(rgname)'
        backendAzureRmStorageAccountName: '$(storename)'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: '$(backend_key)'
        backendAzureRmAccessKey: '$(storage_account_key)'

    # Run Terraform Validate    
    - task: TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'


    # Run Terraform Apply
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
        commandOptions: '-auto-approve -no-color -lock=false'
        continueOnError: true  # Continue on error to execute the next step

    - script: |
        az storage blob lease release --blob-name $(backend_key) --container-name tfstate --account-name $(storename) --account-key $(storage_account_key) --lease-id $(LEASE_ID)
        echo "Released lease ID: $(LEASE_ID)"
      displayName: 'Release lease on state file'
      condition: always()  # Always run this step to ensure the lease is released


- stage: Build
  displayName: Build
  jobs:
  - job: Build
    pool: myFinalPool
    steps:
    #Needed for Terraform VM deployment
    # - task: InstallSSHKey@0
    #   inputs:
    #     knownHostsEntry: 'KNOWN_HOSTS_STRING'
    #     sshPublicKey: 'PUBLIC_KEY'
    #     sshKeySecureFile: 'id_rsa'

    - script: |
        sudo apt-get update
        sudo apt-get install -y zip
      displayName: 'Install zip utility'
      
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
   
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi
    
    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/selenium-tests.zip
        replaceExistingArchive: true
        
    - upload: $(Build.ArtifactStagingDirectory)/selenium-tests.zip
      artifact: selenium


- stage: WebAppDeployment
  displayName: Web App Deployment
  jobs:
  - deployment: FakeRestAPI
    pool: myFinalPool
    environment: 'WAP-TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: '$(azureServiceConnectionId)'
              appType: 'webApp'
              appName: '$(appname)'
              package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'
              deploymentMethod: 'auto'
  - deployment: VMDeploy
    pool: myFinalPool
    displayName: VM Deploy
    environment:
      name: 'VM-TEST'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            displayName: 'Install Dependencies'
            inputs:
              targetType: 'inline'
              script: |
                echo "Updating and upgrading the system..."
                echo "Happymillie7!" | sudo -S apt-get update -y
                echo "Happymillie7!" | sudo -S apt-get upgrade -y
                
                echo "Installing python3-pip, unzip, chromium-browser, and jq..."
                echo "Happymillie7!" | sudo -S apt-get install -y python3-pip unzip chromium-browser jq
                echo "Installing selenium..."
                echo "Happymillie7!" | sudo -S pip3 install selenium
                
                echo "Checking for chromedriver_linux64.zip..."
                FILE=chromedriver_linux64.zip
                if [ -f "$FILE" ]; then
                  echo "$FILE exists."
                else
                  echo "Downloading chromedriver_linux64.zip..."
                  wget https://chromedriver.storage.googleapis.com/2.41/chromedriver_linux64.zip
                fi
                echo "Unzipping chromedriver_linux64.zip..."
                unzip chromedriver_linux64.zip -d chromedriver_temp
                ls -l chromedriver_temp
                echo "Moving chromedriver to /usr/bin/chromedriver..."
                echo "Happymillie7!" | sudo -S mv chromedriver_temp/chromedriver /usr/bin/chromedriver
                echo "Changing ownership and permissions for chromedriver..."
                echo "Happymillie7!" | sudo -S chown root:root /usr/bin/chromedriver
                echo "Happymillie7!" | sudo -S chmod +x /usr/bin/chromedriver
                echo "Chromium browser version:"
                chromium-browser --version
                echo "Chromedriver version:"
                chromedriver --version
                echo "Downloading and running OMS agent script..."
                wget https://raw.githubusercontent.com/Microsoft/OMS-Agent-for-Linux/master/installer/scripts/onboard_agent.sh && echo "Happymillie7!" | sudo -S sh onboard_agent.sh -w dbf2bd83-6d47-436b-a499-a2b566def8fe -s MuSR8Ti5MMi0E+9+1NM4NxCxFqJcfLzuGD0EtGhjXo3Vhy/THcSdCf1WyQnkXafD+6DiFjiOAEfJiQh6EbZVeg== -d opinsights.azure.com
                echo "Installation of dependencies complete."


          - task: DownloadPipelineArtifact@2
            displayName: 'Download Selenium'
            inputs:
              buildType: 'current'
              artifactName: 'selenium'
  
          - task: Bash@3
            displayName: 'UI Tests'
            inputs:
              targetType: 'inline'
              script: |
                echo "Unzipping selenium tests..."
                unzip -o $(Pipeline.Workspace)/selenium/selenium-tests.zip -d .
                echo "Creating /var/logs directory..."
                echo "Happymillie7!" | sudo -S mkdir -p /var/logs
                echo "Running UI tests..."
                echo "Happymillie7!" | sudo -S python3 uitests.py > ui-logs.log
                echo "Moving logs to /var/logs..."
                echo "Happymillie7!" | sudo -S mv ui-logs.log /var/logs
                echo "UI tests completed."

- stage: UITests
  displayName: UI Tests
  jobs:
  - deployment: VMRunUITests
    pool: myFinalPool
    displayName: Run UI Tests
    environment:
      name:  'VM-TEST'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            displayName: 'Download Selenium'
            artifact: selenium
          - task: Bash@3
            displayName: UI Tests
            inputs:
              targetType: 'inline'
              script: |
                unzip -o $(Pipeline.Workspace)/selenium/selenium-tests.zip -d .
                sudo -S mkdir -p /var/logs <<< "Happymillie7!"
                # Ensure uitests.py is in the current directory or specify the correct path
                if [ -f "uitests.py" ]; then
                  python3 uitests.py > ui-logs.log
                else
                  echo "Error: uitests.py not found"
                  exit 1
                fi
                cat ui-logs.log
                sudo -S mv ui-logs.log /var/logs <<< "Happymillie7!"



