# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main


pool: myFinalPool

variables:
  system.debug: true
  python.version: '3.9'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'myServiceConnection'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'test'
  #Resource Group Name
  rgname: 'endrias2024_rg_354888' 
  #Storage Name
  storename: 'mystoragefinalproj' 
  backend_key: 'test.terraform.tfstate'
  storage_account_key: 'SIX4qMsGiDSN40qEZ+YFZm8MZB0EDmLLz3YGlQkgrG/u92UAJCLhgdqrvVK6qqAWrM6OASsFCeXZ+ASt4df8mw=='

stages:
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    
    # Ensure unzip is installed
    - script: |
        sudo apt-get update
        sudo apt-get install -y unzip
      displayName: 'Install unzip utility'

    # Install Terraform on the pipeline agent 
    - task: TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
            terraformVersion: 1.2.9

    # ToDo: Replace the resource group name, storage account name, and container name below
    - task: TerraformTaskV3@3
      displayName: 'Terrafom init again..'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: '$(rgname)'
        backendAzureRmStorageAccountName: '$(storename)'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: '$(backend_key)'
        backendAzureRmAccessKey: '$(storage_account_key)'

    # Run Terraform Validate    
    - task: TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'


    # Remove and Import Resource Group
    - script: |
        terraform state rm module.resource_group.azurerm_resource_group.test || true
        terraform import module.resource_group.azurerm_resource_group.test /subscriptions/74e2073f-57ce-4af8-8ea6-8ecc9e28d555/resourceGroups/endrias2024_rg_354888
      displayName: 'Terraform manage resource group'
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    
    # Remove and Import Public IP
    - script: |
        terraform state rm module.publicip.azurerm_public_ip.test || true
        terraform import module.publicip.azurerm_public_ip.test /subscriptions/74e2073f-57ce-4af8-8ea6-8ecc9e28d555/resourceGroups/endrias2024_rg_354888/providers/Microsoft.Network/publicIPAddresses/endriasApplication-publicip-pubip
      displayName: 'Terraform manage public IP'
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    
    # Remove and Import Service Plan
    - script: |
        terraform state rm module.appservice.azurerm_service_plan.test || true
        terraform import module.appservice.azurerm_service_plan.test /subscriptions/74e2073f-57ce-4af8-8ea6-8ecc9e28d555/resourceGroups/endrias2024_rg_354888/providers/Microsoft.Web/serverFarms/endriasApplication-AppService
      displayName: 'Terraform manage service plan'
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    
    # Remove and Import Virtual Network
    - script: |
        terraform state rm module.network.azurerm_virtual_network.test || true
        terraform import module.network.azurerm_virtual_network.test /subscriptions/74e2073f-57ce-4af8-8ea6-8ecc9e28d555/resourceGroups/endrias2024_rg_354888/providers/Microsoft.Network/virtualNetworks/endriasApplication-NET
      displayName: 'Terraform manage virtual network'
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    
    # Remove and Import Network Security Group
    - script: |
        terraform state rm module.nsg-test.azurerm_network_security_group.nsg || true
        terraform import module.nsg-test.azurerm_network_security_group.nsg /subscriptions/74e2073f-57ce-4af8-8ea6-8ecc9e28d555/resourceGroups/endrias2024_rg_354888/providers/Microsoft.Network/networkSecurityGroups/endriasApplication-NSG
      displayName: 'Terraform manage network security group'
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'

    # Remove and Import Linux Web App
    - script: |
        terraform state rm module.appservice.azurerm_linux_web_app.test || true
        terraform import module.appservice.azurerm_linux_web_app.test /subscriptions/74e2073f-57ce-4af8-8ea6-8ecc9e28d555/resourceGroups/endrias2024_rg_354888/providers/Microsoft.Web/sites/endriasApplication-AppService
      displayName: 'Terraform manage Linux Web App'
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'


      # Remove and Import Subnet
    - script: |
        terraform state rm module.network.azurerm_subnet.test || true
        terraform import module.network.azurerm_subnet.test /subscriptions/74e2073f-57ce-4af8-8ecc9e28d555/resourceGroups/endrias2024_rg_354888/providers/Microsoft.Network/virtualNetworks/endriasApplication-NET/subnets/endriasApplication-NET-sub
      displayName: 'Terraform manage subnet'
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'

    
    # Run Terraform Apply
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
        commandOptions: '-auto-approve -no-color'

    # Destroy the resources in Azure
    # ToDo: Change the workingDirectory path, as applicable to you
    - task: TerraformTaskV3@3
      displayName: Terraform destroy
      inputs:
        provider: 'azurerm'
        command: 'destroy'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'



    
