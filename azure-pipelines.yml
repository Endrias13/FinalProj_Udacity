# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool: myFinalPool

variables:
  system.debug: true
  python.version: '3.9'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'myServiceConnection'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'test'
  #Resource Group Name
  rgname: 'endrias2024_rg_354888' 
  #Storage Name
  storename: 'mystoragefinalproj' 
  backend_key: 'test.terraform.tfstate'
  storage_account_key: 'SIX4qMsGiDSN40qEZ+YFZm8MZB0EDmLLz3YGlQkgrG/u92UAJCLhgdqrvVK6qqAWrM6OASsFCeXZ+ASt4df8mw=='

stages:
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    
    # Ensure unzip is installed
    - script: |
        sudo apt-get update
        sudo apt-get install -y unzip
      displayName: 'Install unzip utility'

    # Install Terraform on the pipeline agent 
    - task: TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
            terraformVersion: 1.2.9

    # ToDo: Replace the resource group name, storage account name, and container name below
    - task: TerraformTaskV3@3
      displayName: 'Terrafom init again..'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: '$(rgname)'
        backendAzureRmStorageAccountName: '$(storename)'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: '$(backend_key)'
        backendAzureRmAccessKey: '$(storage_account_key)'

    # Run Terraform Validate    
    - task: TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'

    
    # Run Terraform Apply
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
        commandOptions: '-auto-approve -no-color -lock=false'


    #--------------------------------------------#    

    - task: CmdLine@2
      displayName: Install Node.js
      inputs:
        script: |
          curl -sL https://deb.nodesource.com/setup_16.x | sudo -E bash -
          sudo apt-get install -y nodejs
          node -v
          npm -v
        workingDirectory: $(System.DefaultWorkingDirectory)
    

    # Install Newman with sudo
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: 'sudo npm install -g newman'
        workingDirectory: $(System.DefaultWorkingDirectory)


    # Postman Data Validation Test Suite
    - task: CmdLine@2
      displayName: Run Data Validation Tests
      continueOnError: true
      inputs:
        script: 'newman run DataValidationTestSuite.json -e DataValidationTestSuite.Environment.json --delay-request 10000 --bail newman -x --reporters cli,junit --reporter-junit-export Results/TEST-DataValidation.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    
    
    # Postman Regression Test Suite
    - task: CmdLine@2
      displayName: Run Regression Tests
      continueOnError: true
      inputs:
        script: 'newman run RegressionTestSuite.json -e RegressionTestSuite.Environment.json --delay-request 10000 --bail newman -x --reporters cli,junit --reporter-junit-export Results/TEST-Regression.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'


    - task: PublishTestResults@2
      displayName: Publish Test Reports
      condition: always()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'Results/*.xml'
        failTaskOnFailedTests: true
        testRunTitle: 'Postman Data Validation Tests'
        
    # Destroy VM
    - task: TerraformTaskV3@3
      displayName: 'Terraform destroy VM'
      inputs:
        provider: 'azurerm'
        command: 'destroy'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
        commandOptions: '-auto-approve -no-color -target=azurerm_virtual_machine.finalProj-VM -lock=false'
        additionalArguments: '-timeout=20m'
    
    # Destroy Network Interface
    - task: TerraformTaskV3@3
      displayName: 'Terraform destroy Network Interface'
      inputs:
        provider: 'azurerm'
        command: 'destroy'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
        commandOptions: '-auto-approve -no-color -target=azurerm_network_interface.finalproj-vm626_z1 -lock=false'
        additionalArguments: '-timeout=20m'
    
    # Destroy Public IP
    - task: TerraformTaskV3@3
      displayName: 'Terraform destroy Public IP'
      inputs:
        provider: 'azurerm'
        command: 'destroy'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
        commandOptions: '-auto-approve -no-color -target=azurerm_public_ip.finalProj-VM-ip -lock=false'
        additionalArguments: '-timeout=20m'
    
    # Destroy Managed Disk
    - task: TerraformTaskV3@3
      displayName: 'Terraform destroy Managed Disk'
      inputs:
        provider: 'azurerm'
        command: 'destroy'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
        commandOptions: '-auto-approve -no-color -target=azurerm_managed_disk.finalProj-VM_OsDisk_1_25030be430a044d1a5971866351741fa -lock=false'
        additionalArguments: '-timeout=20m'
    
    # Destroy Subnet Network Security Group Association
    - task: TerraformTaskV3@3
      displayName: 'Terraform destroy Subnet NSG Association'
      inputs:
        provider: 'azurerm'
        command: 'destroy'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
        commandOptions: '-auto-approve -no-color -target=azurerm_subnet_network_security_group_association.endriasApplication-NET-sub -lock=false'
        additionalArguments: '-timeout=20m'
    
    # Destroy Subnet
    - task: TerraformTaskV3@3
      displayName: 'Terraform destroy Subnet'
      inputs:
        provider: 'azurerm'
        command: 'destroy'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
        commandOptions: '-auto-approve -no-color -target=azurerm_subnet.endriasApplication-NET-sub -lock=false'
        additionalArguments: '-timeout=20m'
    
    # Destroy Virtual Network
    - task: TerraformTaskV3@3
      displayName: 'Terraform destroy Virtual Network'
      inputs:
        provider: 'azurerm'
        command: 'destroy'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
        commandOptions: '-auto-approve -no-color -target=azurerm_virtual_network.endriasApplication-NET -lock=false'
        additionalArguments: '-timeout=20m'
    
    # Destroy Storage Account
    - task: TerraformTaskV3@3
      displayName: 'Terraform destroy Storage Account'
      inputs:
        provider: 'azurerm'
        command: 'destroy'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
        commandOptions: '-auto-approve -no-color -target=azurerm_storage_account.mystoragefinalproj -lock=false'
        additionalArguments: '-timeout=20m'
    


    
