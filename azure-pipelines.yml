# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool: myFinalPool

variables:
  system.debug: true
  python.version: '3.9'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'myServiceConnection'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'test'
  #Resource Group Name
  rgname: 'endrias2024_rg_354888' 
  #Storage Name
  storename: 'mystoragefinalproj' 
  #App Name
  appname: 'endriasApplication-AppService'
  backend_key: 'test.terraform.tfstate'
  storage_account_key: 'SIX4qMsGiDSN40qEZ+YFZm8MZB0EDmLLz3YGlQkgrG/u92UAJCLhgdqrvVK6qqAWrM6OASsFCeXZ+ASt4df8mw=='



stages:
- stage: WebAppDeployment
  displayName: Web App Deployment
  jobs:
  - deployment: FakeRestAPI
    pool: myFinalPool
    environment: 'WAP-TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: '$(azureServiceConnectionId)'
              appType: 'webApp'
              appName: '$(appname)'
              package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'
              deploymentMethod: 'auto'
  - deployment: VMDeploy
    pool: myFinalPool
    displayName: VM Deploy
    environment:
      name: 'VM-TEST'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            displayName: 'Install Dependencies'
            inputs:
              targetType: 'inline'
              script: |
                echo "Happymillie7!" | sudo -S apt-get update -y
                echo "Happymillie7!" | sudo -S apt-get upgrade -y
                echo "Happymillie7!" | sudo -S apt-get install -y python3-pip unzip chromium-browser
                echo "Happymillie7!" | sudo -S pip3 install selenium
                
                FILE=chromedriver_linux64.zip
                if [ -f "$FILE" ]; then
                  echo "$FILE exists."
                else
                  wget https://chromedriver.storage.googleapis.com/2.41/chromedriver_linux64.zip
                fi
                unzip chromedriver_linux64.zip
                echo "Happymillie7!" | sudo -S mv chromedriver /usr/bin/chromedriver
                echo "Happymillie7!" | sudo -S chown root:root /usr/bin/chromedriver
                echo "Happymillie7!" | sudo -S chmod +x /usr/bin/chromedriver
                chromium-browser --version
                chromedriver --version
                wget https://raw.githubusercontent.com/Microsoft/OMS-Agent-for-Linux/master/installer/scripts/onboard_agent.sh && echo "your_password" | sudo -S sh onboard_agent.sh -w dbf2bd83-6d47-436b-a499-a2b566def8fe -s MuSR8Ti5MMi0E+9+1NM4NxCxFqJcfLzuGD0EtGhjXo3Vhy/THcSdCf1WyQnkXafD+6DiFjiOAEfJiQh6EbZVeg== -d opinsights.azure.com
  
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Selenium'
            inputs:
              buildType: 'current'
              artifactName: 'selenium'
  
          - task: Bash@3
            displayName: 'UI Tests'
            inputs:
              targetType: 'inline'
              script: |
                unzip -o $(Pipeline.Workspace)/selenium/selenium-tests.zip -d .
                echo "Happymillie7!" | sudo -S mkdir -p /var/logs
                echo "Happymillie7!" | sudo -S python3 uitests.py > ui-logs.log
                echo "Happymillie7!" | sudo -S mv ui-logs.log /var/logs
